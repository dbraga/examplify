#! /usr/bin/env python
import sys
import os 
import errno
import glob
# import shutil
# from random import choice
import re
import unittest
import random

program_name = "examplify"
program_directory = "." + program_name
config_directory = "config"
config_filename=[ ".wizzy-config", ".examplify" ]
script_name=program_name


list_of_regex = {

	'username: [\w\d]*(\n)' : 'username: username_example\n',
	':username: [\w\d]*(\n)' : ':username: username_example\n',

	'password: [\w\d]*(\n)' : 'password: password_example\n',
	':password: [\w\d]*(\n)' : ':password: password_example\n',

	'host: [\w\d\.]*(\n)' : 'host: host.example.it\n',
	':host: [\w\d\.]*(\n)' : ':host: host.example.it\n',
	'host = [\w\d\.-]*' : 'host = host.example.it',


	'port = [\d]*' : 'port = 123456',
	'port: [\w\d\.]*(\n)': 'port: 123456\n',
	':port: [\w\d\.]*(\n)': ':port: 123456\n',

	'from: [\w\d]*(\n)': 'from: no-reply@example.com\n',
	':from: [\w\d]*(\n)': ':from: no-reply@example.com\n',

	'address: [\w\d\.]*(\n)': 'address: smtp.example.net\n',
	':address: [\w\d\.]*(\n)': ':address: smtp.example.net\n',

	'database: [\w\d]*(\n)' : 'database: example\n',
	':database: [\w\d]*(\n)' : ':database: example\n',

	':database: [\w\d]*(\n)' : ':database: example\n',

	#URL
	'"http://[\w./\?=&]*"' : '"http://www.example.ex"',
	#EMAIL
	'"[\w]*@[\w]*[.[\w]*]*"' : '"email@email.em"',
}


def getListOfFilesToExamplify(file):
	l = list()
	f = open(file, 'r')
	for line in f:
	    l.append(line.rstrip('\r\n'))
	return l


def file_to_string(file):
	# Get a file and return a string that contains the file
	f = open(file, 'r')
	string = f.read()
	f.close()
	return string

def apply_regex(string):
	new_string = string
	for regex in list_of_regex:
		rex =  re.compile(regex)
		new_string = rex.sub(list_of_regex[regex], new_string)
	return new_string

class TestSequenceFunctions(unittest.TestCase):

	def test_apply_regex(self):
		# # Test port regex
		# # 1) perfect match
		# self.assertEqual(apply_regex(":port: 25"),list_of_regex[':?port: [0-9]*'])
		# # 2) blank spaces before or after
		# self.assertEqual(apply_regex(" :port: 25")," "+list_of_regex[':?port: [0-9]*'])
		# self.assertEqual(apply_regex(":port: 25 "),list_of_regex[':?port: [0-9]*']+" ")
		# # 3) string instead of number on the port
		# self.assertNotEqual(apply_regex(":port: example "),list_of_regex[':?port: [0-9]*']+" ")
		# # 4) port with equal sign
		# self.assertEqual(apply_regex("port = 25 "),list_of_regex['port [ =0-9]*'])

		# # Test address
		# self.assertEqual(apply_regex(":address: \"string\""),list_of_regex[':address: [a-zA-Z0-9.\"]*'])
		# self.assertEqual(apply_regex(":address: \"string\""),list_of_regex[':address: [a-zA-Z0-9.\"]*'])
		# # number instead of string
		# self.assertEqual(apply_regex(":address: 1234"),list_of_regex[':address: [a-zA-Z0-9.\"]*'])

		# #Test from
		# self.assertEqual(apply_regex(':from: unife@unife.it'),list_of_regex[':from: [a-zA-Z.@\"\-]*'])
		# self.assertEqual(apply_regex(':from: "unife@unife.it"'),list_of_regex[':from: [a-zA-Z.@\"\-]*'])

		# #Test subject
		# self.assertEqual(apply_regex(':subject: this is a subject'),list_of_regex[':subject: [a-zA-Z.@\"\-\ ]*'])
		# self.assertEqual(apply_regex(':subject: "this is a subject"'),list_of_regex[':subject: [a-zA-Z.@\"\-\ ]*'])

		# #Test username
		# self.assertEqual(apply_regex(':username: "my_username_has_numb3r5"'),list_of_regex[':username: [a-zA-Z.@\"\-0-9_]*'])
		
		# #Test password
		# self.assertEqual(apply_regex(':password: test'),list_of_regex[':password:[ a-zA-Z.@\"\-\0-9_]*'])
		# self.assertNotEqual(apply_regex('password: test'),list_of_regex[':password:[ a-zA-Z.@\"\-\0-9_]*'])

		# # Test host
		# self.assertEqual(apply_regex('host = dbrails.test.it'),list_of_regex['host = [a-zA-Z0-9.\"]*'])
		

def search_for_config_files():
	#from .wizzy-config
	# f = open(config_filename, 'r')
	for config_file in config_filename:
		# print config_file
		if glob.glob(config_file):
			print "Found a "+config_file+" file."

			for element in  getListOfFilesToExamplify(config_file):
				if  not glob.glob(os.path.abspath(element)):
				#The file(s) are in the config file but not on the os !
					print "ERROR! Seems that "+element+" is not present on your os! Can you check the "+config_file+" for missing files?"
			for files in glob.glob(os.path.abspath(element)):
				print "Examplifying "+files+ " .."
				examplify(files)
				print "		-> "+ files + " examplified"
			return True

def examplify(file):
	try:
		originalString = file_to_string(file)
		f = open(file, 'w')
		f.write(apply_regex(originalString))
		f.close()
	except Exception as detail :
		print str(detail)
		exit(1)
	# Copy the file in a string




def exec_arg(argv):
	if len(argv) == 1:
		# examplify
		print "Exec examplify from " + str(config_filename)
		if not search_for_config_files():
			print "ERROR! You need at least one configuration file between: "+str(config_filename)
	elif (len(argv) == 2 and (argv[1]=="test" )):
		# run some tests
		suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
		unittest.TextTestRunner(verbosity=2).run(suite)

	else:
		# examplify < file1, file2 >
		for f in argv[1:] :
			print "Fixing file: " + f
			examplify(f)
			print "-> "+ f + " fixed"

exec_arg(sys.argv)
